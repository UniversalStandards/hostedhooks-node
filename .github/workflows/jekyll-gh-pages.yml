# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  actions: write
  attestations: write
  checks: write
  deployments: write
  issues: write
  discussions: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

- name: chatgpt-action
  # You may pin to the exact commit or the version.
  # uses: unsafecoerce/chatgpt-action@df5b73b6f2d8b7f16a51de0f2f3810bd320b053e
    uses: unsafecoerce/chatgpt-action@release/v2
      with:
    # The action to run, currently can be "review", "score"
      action: # optional, default is review
    # Enable debug mode
      debug: # optional
    # The path filters, e.g., "src/**.py", "!dist/**", each line will be considered as one pattern.
See also

- https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
- https://github.com/isaacs/minimatch

    path_filters: !dist/**
!**/package-lock.json

    # The URL of the chatgpt reverse proxy, see also https://github.com/transitive-bullshit/chatgpt-api#reverse-proxy

    chatgpt_reverse_proxy: https://chat.duti.tech/api/conversation
    # Leave comments even the patch is LGTM
    review_comment_lgtm: # optional
    # The beginning prompt of a code review dialog
    review_beginning: I have a pull request with title "$title" and the description is as follows,

> $description.

Next, I will given you a series of patches, each of them consists of a filename and a diff
snippet, and you need to do a brief code review for every message, and tell me any bug risk
and improvement suggestion. If the patch is looks good and acceptable, please reply "LGTM!"
with a short comment with 30 words.

You answer should be concise. Don't include the diff in your comment, and markdown format is
preferred. Reply "OK" to confirm.

    # The prompt for each chunks/patches
    review_patch: $filename

```diff
$patch
```

    # The prompt for the whole pull request
    scoring_beginning: # optional, default is Hi ChatGPT, I have a pull request with title "$title" and the description is as follows,

> $description

I would like score the pull request, the score should be a number between 0 and 100
and 85 means the the pull request is basically acceptable. You just need to reply a
number between 0 and 100, e.g., "85", and a comment within 30 words. Next, I would
give you the whole diff of the pull request. Reply "OK" to confirm.

    # The prompt for the whole diff for scoring
    scoring: # optional, default is The diff is as follows:

```diff
$diff
```

